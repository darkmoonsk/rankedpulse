// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  company       String?
  plan          String?   @default("free")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  urls          Url[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// URL model for the URL management feature
model Url {
  id          String     @id @default(cuid())
  url         String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastScanned DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  analyses    Analysis[]
}

model Analysis {
  id            String   @id @default(cuid())
  urlId         String
  url           Url      @relation(fields: [urlId], references: [id], onDelete: Cascade)
  performance   Float?
  accessibility Float?
  seo           Float?
  bestPractices Float?
  rawData       Json?
  createdAt     DateTime @default(now())
}
